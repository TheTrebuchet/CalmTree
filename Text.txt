import bpy
import math
import mathutils

bpy.ops.curve.primitive_bezier_curve_add(enter_editmode=True, align='WORLD', location=(0, 0, 0), rotation=(0,math.pi/2,0))
bpy.ops.transform.translate(value=(0,0,5))
bpy.ops.transform.resize(value=(3.0, 3.0, 5.0))
bpy.ops.object.mode_set(mode='OBJECT')
bpy.ops.object.transform_apply(location=False, rotation=True, scale=False)
obj = bpy.context.active_object
bpy.ops.object.convert(target='MESH')
bpy.ops.object.mode_set(mode='EDIT')
bpy.ops.mesh.select_mode(type="VERT")
bpy.ops.mesh.select_all(action = 'DESELECT')
bpy.ops.object.mode_set(mode='OBJECT')
obj.data.vertices[0].select = True
bpy.ops.object.mode_set(mode = 'EDIT')
bpy.ops.mesh.select_linked(delimit=set())
bpy.ops.object.mode_set(mode='OBJECT')
curve = [v.co for v in obj.data.vertices if v.select]
if curve[-1].length<curve[0].length:
    curve.reverse()

selected_obj = bpy.context.object
            
print(sum([(curve[i+1]-curve[i]).length for i in range(len(curve)-1)]))